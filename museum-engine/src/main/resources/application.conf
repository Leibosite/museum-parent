#########################################################################
#-------------------Actor配置----------------------------				#
# 参考applicationContext-pcrf-engine-actor.xml中pcrfActorSystem			#
# <property name="configName" value="pcrf-engine"/>						#
# /gx/route： 路径，相对于user											#
# router: 路由选择方法，round-robin：随机选择								#
# nr-of-instances: 启动Actor的数量										#
#########################################################################
museum-engine {
	# 配置Actor数目和路由方法
	akka.actor.deployment {
		 
		/gx/route {
			router = round-robin
			nr-of-instances = 1
		}
		
		/gx/send {
			router = round-robin
			nr-of-instances = 1
		}

		/gx/establish {
			router = balancing-pool
			nr-of-instances = 30
		}

		/gx/update {
			router = round-robin
			nr-of-instances = 30
		}
		
		/gx/terminate {
			router = balancing-pool
			nr-of-instances = 30
		}

		/gx/rar-synchronizer {
            router = balancing-pool
            nr-of-instances = 10
        }

        /gx/rar-ocs-control {
            router = balancing-pool
            nr-of-instances = 10
        }

		/gxa/route {
            router = round-robin
            nr-of-instances = 1
            #within = 3 seconds
        }

        /gxa/send {
            router = round-robin
            nr-of-instances = 1
        }

        /gxa/establish {
            router = balancing-pool
            nr-of-instances = 10
        }

        /gxa/update {
            router = round-robin
            nr-of-instances = 10
        }

        /gxa/terminate {
            router = balancing-pool
            nr-of-instances = 10
        }

        /gxa/rar-synchronizer {
            router = balancing-pool
            nr-of-instances = 2
        }

        /gxa/task-rar {
            router = balancing-pool
            nr-of-instances = 1
        }

        /sy/route {
            router = round-robin
            nr-of-instances = 1
        }


        /sy/send {
            router = round-robin
            nr-of-instances = 1
            #within = 3 seconds
        }

        /sy/sla {
            router = balancing-pool
            nr-of-instances = 3
        }

        /sy/report {
            router = balancing-pool
            nr-of-instances = 3
        }

        /sy/rar-establish {
            router = balancing-pool
            nr-of-instances = 3
        }

		/sy/rar-stop {
            router = balancing-pool
            nr-of-instances = 3
        }

		/cdrmsg/send {
			router = round-robin
			nr-of-instances = 3
			#within = 3 seconds
		}
		
		/smssend/send {
			router = round-robin
			nr-of-instances = 10
			#within = 3 seconds
		}
	}
	
	smssend-send-dispatcher {
		type = "Dispatcher"
		executor = "fork-join-executor"
		
		fork-join-executor {
			parallelism-min = 10
			parallelism-factor = 1
			parallelism-max = 10
		}
		
		#throughput-deadline-time = 0ms
		throughput = 10
	}
	
	cdrmsg-send-dispatcher {
		type = "Dispatcher"
		executor = "fork-join-executor"
		
		fork-join-executor {
			parallelism-min = 1
			parallelism-factor = 1
			parallelism-max = 3
		}
		
		throughput = 10
	}
	
	gx-route-dispatcher {
		type = "Dispatcher"
		executor = "fork-join-executor"
		
		fork-join-executor {
			parallelism-min = 1
			parallelism-factor = 1.0
			parallelism-max = 1
		}
		
		throughput = 1
	}

	gx-router-mailbox {
        mailbox-type = "akka.dispatch.BoundedMailbox"
        mailbox-capacity = 6000
        mailbox-push-timeout-time = 3s
        stash-capacity = -1
    }

    pcrf-default-mailbox {
        mailbox-type = "akka.dispatch.BoundedMailbox"
        mailbox-capacity = 10000
        mailbox-push-timeout-time = 3s
        stash-capacity = -1
    }

    gx-establish-mailbox {
        mailbox-type = "akka.dispatch.BoundedMailbox"
        mailbox-capacity = 10000
        mailbox-push-timeout-time = 3s
        stash-capacity = -1
    }

    gx-terminate-mailbox {
        mailbox-type = "akka.dispatch.BoundedMailbox"
        mailbox-capacity = 2000
        mailbox-push-timeout-time = 3s
        stash-capacity = -1
    }
	
	gx-send-dispatcher {
		type = "Dispatcher"
		executor = "fork-join-executor"
		
		fork-join-executor {
			parallelism-min = 1
			parallelism-factor = 1.0
			parallelism-max = 2
		}
		
		throughput = 1
	}
			
	gx-establish-dispatcher {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
		    core-pool-size-min = 20
            core-pool-size-factor = 2.0
            core-pool-size-max = 50
		}
		
		throughput = 1
	}
	
	gx-update-dispatcher {
		type = "Dispatcher"
		executor = "fork-join-executor"
		fork-join-executor {
			parallelism-min = 5
			parallelism-factor = 2.0
			parallelism-max = 20
		}
		
		# throughput-deadline-time = 0ms
		throughput = 1
	}
	
	gx-terminate-dispatcher {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
		    core-pool-size-min = 20
		    core-pool-size-factor = 2.0
		    core-pool-size-max = 50
		}

		throughput = 1
	}

    gx-rar-synchronizer-dispatcher {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
		    core-pool-size-min = 3
		    core-pool-size-factor = 1.0
		    core-pool-size-max = 10
		}

		throughput = 1
	}

	gx-rar-ocs-control-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 3
            core-pool-size-factor = 1.0
            core-pool-size-max = 10
        }

        throughput = 1
    }

	gxa-route-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"

        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 1.0
            parallelism-max = 1
        }

        throughput = 1
    }

    gxa-send-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"

        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 1.0
            parallelism-max = 2
        }

        throughput = 1
    }

    gxa-establish-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            max-pool-size-min = 5
            max-pool-size-factor  = 2.0
            max-pool-size-max = 10
        }

        throughput = 1
    }

    gxa-update-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"
        fork-join-executor {
            parallelism-min = 3
            parallelism-factor = 2.0
            parallelism-max = 15
        }

        throughput = 1
    }

    gxa-terminate-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 5
            core-pool-size-factor = 2.0
            core-pool-size-max = 20
        }

        throughput = 1
    }

    gxa-rar-synchronizer-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 2
            core-pool-size-factor = 2.0
            core-pool-size-max = 15
        }

        throughput = 1
    }


    gxa-task-rar-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 2
            core-pool-size-factor = 2.0
            core-pool-size-max = 15
        }

        throughput = 1
    }

    sy-route-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"

        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 1.0
            parallelism-max = 1
        }

        throughput = 1
    }

    sy-send-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"

        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 1.0
            parallelism-max = 2
        }

        throughput = 1
    }

    sy-sla-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 2
            core-pool-size-factor = 2.0
            core-pool-size-max = 5
        }

        throughput = 1
    }

    sy-report-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 1
            core-pool-size-factor = 2.0
            core-pool-size-max = 10
        }

        throughput = 1
    }

    sy-rar-establish-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 1
            core-pool-size-factor = 2.0
            core-pool-size-max = 5
        }

        throughput = 1
    }

    sy-rar-stop-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
            core-pool-size-min = 1
            core-pool-size-factor = 2.0
            core-pool-size-max = 5
        }

        throughput = 1
    }

	
	#默认Actor配置参数	
	akka {
		akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
		loglevel = "ERROR"
		stdout-loglevel = "ERROR"
		log-config-on-start = off
		log-dead-letters = off
		log-dead-letters-during-shutdown = off
		
		provider = "akka.actor.LocalActorRefProvider"
		guardian-supervisor-strategy = "akka.actor.StoppingSupervisorStrategy"
		creation-timeout = 30s
		reaper-interval = 300s
		serialize-messages = off
		serialize-messages = off
		serialize-messages = off
		
		actor {
			default-dispatcher = {
				type = "Dispatcher"
				executor = "fork-join-executor"
				fork-join-executor {
					parallelism-min = 5
					parallelism-factor = 1.0
					parallelism-max = 20
				}
				
				throughput = 1
			}
		}
		
		zeromq {
		    poll-timeout = 5ms
		    new-socket-timeout = 20s
		 
		    socket-dispatcher {
		      executor = thread-pool-executor
		      type = "PinnedDispatcher"
		      thread-pool-executor.allow-core-timeout = off
		      thread-pool-executor.max-pool-size-min = 1
		      thread-pool-executor.max-pool-size-factor  = 1.0
		      thread-pool-executor.max-pool-size-max = 1
		    }
		}
	}	
}

