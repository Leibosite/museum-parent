/*// Generated by CoffeeScript 1.6.1
(function() {
  var operatorBlockBuilder;

  $(function() {
    var baseObjectId, templateId;
    $(".pre_disable_todo_block").disable({
      disableEveryElement: true,
      maskClass: 'js-disabled-mask-transparent'
    });
    templateId = $("#templateId").attr('value');
    baseObjectId = $("#initialID").attr('value');
    $("ul.margin-top-bottom.task-list > li").each(function() {
      var resolveTarget,
        _this = this;
      resolveTarget = $(this).attr('id');
      if (templateId) {
        if (resolveTarget && baseObjectId) {
          return $.ajax({
            type: 'GET',
            url: 'show',
            data: {
              baseObjectId: baseObjectId,
              resolveTarget: resolveTarget,
              ajax: true,
              templateId: templateId
            },
            success: function(data) {
              disable_restore();
              return addInfo_return(_this, data);
            }
          });
        }
      } else {
        if (resolveTarget && baseObjectId) {
          return $.ajax({
            type: 'GET',
            url: 'show',
            data: {
              baseObjectId: baseObjectId,
              resolveTarget: resolveTarget,
              ajax: true
            },
            success: function(data) {
              disable_restore();
              return addInfo_return(_this, data);
            }
          });
        }
      }
    });
    $(".constraints-content").each(function() {
      return $(this).ruleOption();
    });
    return $(".js-close-btn").click(function() {
      return $(this).parent().remove();
    });
  });

  operatorBlockBuilder = function(operators) {
    var operator, result, string_buffer;
    string_buffer = "";
    operator = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = operators.length; _i < _len; _i++) {
        operator = operators[_i];
        _results.push(string_buffer += "<li><a href=\"#\"> " + operator + "</a></li>");
      }
      return _results;
    })();
    return result = "<div class=\"sub-attributes\">\n	" + string_buffer + "\n</div>";
  };
  
  // 在chosen基础上添加添加tag样式的插件。未找到结果也可以添加选项
  $.fn.extend({
	  tagStyle: function(){
			
			// get the chosen object
		   var select = $(this);
		    var chosen = select.data('chosen');
		
		    // Bind the keyup event to the search box input
		    chosen.search_field.on('keyup', function(e)
		    {
		        // if we hit Enter and the results list is empty (no matches) add the option
		        if (e.which == 13 && chosen.dropdown.find('li.no-results').length > 0)
		        {
		            var option = $("<option>").val(this.value).text(this.value);
		           
		            // add the new option
		            select.append(option);
		            // automatically select it
		            select.find(option).prop('selected', true);
		            // trigger the update
		            select.trigger("liszt:updated");
		        }
		    });
	    
		}
  });

  $.fn.extend({
    ruleOption: function(options) {
      var content, _this;
      content = $(this).find("#constraints-element button.dropdown-toggle").get(0);
      _this = this;
      return $(this).find("ul li a").click(function() {
        var inputBlock, input_c, operator, operatorBlock, resultHtml, title, type;
        $("#operator").remove();
        $("#inputBlock").remove();
        title = $(this).html();
        type = $(this).attr("pma-oper-type");
        $(content).html(title + "<span class='caret'></span>");
        input_c = $(_this).find("[name='constraint-type']").get(0);
        $(input_c).val(title);
        resultHtml = (function() {
          switch (type) {
            case "LONG":
              return operatorBlockBuilder(["GREATER", "LESS", "adasdfas"]);
            case "STRING":
              return operatorBlockBuilder(["GREATER", "LESS"]);
            case "OBJECT":
              return operatorBlockBuilder(["GREATER", "LESS"]);
            case "INTEGER":
              return operatorBlockBuilder(["GREATER", "LESS"]);
            case "ENUM":
              return operatorBlockBuilder(["GREATER", "LESS"]);
          }
        })();
        operatorBlock = "<div style=\"display:inline-block\" id=\"operator\" class=\"btn-group\">\n	<button data-toggle=\"dropdown\" class=\"btn btn-mini btn-warning dropdown-toggle\"><i class=\"icon-white icon-hand-up\"></i><span class=\"caret\"></span>\n		<input type=\"hidden\" name=\"operator-type\" style=\"display:none\">\n	</button>\n	<ul class=\"dropdown-menu\">\n		" + resultHtml + "\n	</ul>\n</div>";
        operatorBlock = $(operatorBlock).appendTo(_this);
        operator = operatorBlock.find("button.dropdown-toggle").get(0);
        $(operatorBlock).find("ul li a").click(function() {
          title = $(this).html();
          $(operator).find("i").remove();
          $(operator).prepend("<i>" + title + "</i>");
          $(operator).dropdown("toggle");
          return false;
        });
        inputBlock = "input.input-small(id=\"inputBlock\" type=\"text\",style=\"display:inline-block;position:relative;margin:0 4px;\",placeholder=\"Set value\")";
        $(inputBlock).appendTo(_this);
        return false;
      });
    }
  });

  $.fn.extend({
    requestForm: function(options) {
      var settings;
      settings = {
        currentWrapper: '',
        ajaxUrl: '',
        addRules: function() {
            return {};
        },
        afterRenderFunction: function() {
          return {};
        }
      };
      settings = $.extend(settings, options);
      return this.each(function() {
        var _this = this;
        return $(this).disable({
          ajaxUrl: options.ajaxUrl,
          enableOnAjaxComplete: true,
          ajaxData: {
            baseObjectId: $("#initialID").attr('value')
          },
          ajaxCallback: function(data) {
            var $page;
            $page = $(data);
            $page.appendTo("body");
            $page.modal('show').on('hidden', function() {
              return $page.remove();
            });
            $page.find('form').validate({
              submitHandler: function(form) {
                return $(form).ajaxSubmit({
                  type: 'POST',
                  data: {
                    baseObjectId: $("#initialID").attr('value')
                  },
                  success: function(data) {
                    addInfo_return(_this, data);
                    disable_restore();
                    return $page.modal('hide');
                  }
                });
              }
            });
            settings.afterRenderFunction();
            settings.addRules();
            return true;
          }
        });
      });
    }
  });

  $.fn.extend({
    simpleRequestForm: function(options) {
      var settings;
      settings = {
        currentWrapper: '',
        ajaxUrl: '',
        submitCallBack: function(data) {
          return window.location.reload();
        },
        addRules: function() {
          return {};
        },
        afterRenderFunction: function() {
          return {};
        }
      };
      settings = $.extend(settings, options);
      return this.each(function() {
        var _this = this;
        return $(this).disable({
          ajaxUrl: options.ajaxUrl,
          enableOnAjaxComplete: true,
          ajaxCallback: function(data) {
            var $page;
            $page = $(data);
            $page.appendTo("body");
            $page.modal('show').on('hidden', function() {
              return $page.remove();
            });
            $page.find('form').validate({
              submitHandler: function(form) {
                return $(form).ajaxSubmit({
                  type: 'POST',
                  success: function(data) {
                    disable_restore();
                    settings.submitCallBack(data);
                    return $page.modal('hide');
                  }
                });
              }
            });
            settings.afterRenderFunction();
            settings.addRules();
            return true;
          }
        });
      });
    }
  });

}).call(this);
*/